{"text": "Li, Xusheng and Fu, Chengcheng and Zhong, Ran and Zhong, Duo and He, Tingting and Jiang, Xingpeng\nBMC Bioinformatics, 2019\n\n# Title\n\nA hybrid deep learning framework for bacterial named entity recognition with domain features\n\n# Keywords\n\nNamed entity recognition\nBiomedical text mining\nConditional random field\nDeep learning\n\n\n# Abstract\n \n## Background \n  \nMicrobes have been shown to play a crucial role in various ecosystems. Many human diseases have been proved to be associated with bacteria, so it is essential to extract the interaction between bacteria for medical research and application. At the same time, many bacterial interactions with certain experimental evidences have been reported in biomedical literature. Integrating this knowledge into a database or knowledge graph could accelerate the progress of biomedical research. A crucial and necessary step in interaction extraction (IE) is named entity recognition (NER). However, due to the specificity of bacterial naming, there are still challenges in bacterial named entity recognition. \n\n\n## Results \n  \nIn this paper, we propose a novel method for bacterial named entity recognition, which integrates domain features into a deep learning framework combining bidirectional long short-term memory network and convolutional neural network. When domain features are not added, F1-measure of the model achieves 89.14%. After part-of-speech (POS) features and dictionary features are added, F1-measure of the model achieves 89.7%. Hence, our model achieves an advanced performance in bacterial NER with the domain features. \n\n\n## Conclusions \n  \nWe propose an efficient method for bacterial named entity recognition which combines domain features and deep learning models. Compared with the previous methods, the effect of our model has been improved. At the same time, the process of complex manual extraction and feature design are significantly reduced. \n\n \n\n# Body\n \n## Background \n  \nMicroorganisms are ubiquitous in nature. Human beings are exposed to microorganisms from birth to death and are associated with microorganisms during all stages of life. The human body together with its microbiome constitutes a super-species, forming our own exclusive microbial community [ ]. Studies have shown that microbial diversity is associated with various human diseases, including allergy, diabetes, obesity, arthritis, inflammatory bowel disease, and even neuropsychiatric diseases [ \u2013 ]. Therefore, the diversity of microbial communities and the interaction between microorganisms and the host immune system play crucial role in guaranteeing human healthy. Microorganisms in microbial communities interact with other members actively which ensures the stability and diversity of microbial communities [ ]. Thus it is important to explore the microbial interaction for understanding the structure of microbial community and applying these results to the biomedical field. In the past, the method of extracting microbial relationships traditionally is to culture bacteria separately in biological laboratory. However, most microbes cannot be cultured experimentally as well as it is time-consuming and expensive. Recently, computational approaches can alleviate above problems to some extent thanks to the development of high-throughput sequencing technologies. At present, there are several kinds of computational methods for this task including exploring microbial interactions from metagenomic data, inferring microbial interaction from genomic information and mining microbial interaction from biomedical literature [ ]. The two former computational approaches are widely explored; however, extracting the microbial interaction from the biomedical literature is less popular. There are rich relevant researches published in the literature confirming certain microbial interactions through direct experiments. It will be a valuable resource to explore the microbial interaction by mining biomedical literatures and integrate these knowledge into a database or knowledge graph. Nevertheless, the rapid growth in the volume of biomedical literature and the variety of microorganisms make manual interaction extraction barely possible. \n\nIn previous work, Freilich [ ] proposed a microbial interaction extraction method based on the co-occurrence model. They first extracted the species names from the intestinal microbial abundance data. Then, they retrieved articles with the two species in PubMed and calculated the co-occurrence probability of the species. Finally, a microbial co-occurrence network was constructed to predict microbial interaction. Similarly, Lim [ ] obtained the data in the same way and put forward an automated microbial interaction extraction method based on support vector machine (SVM). What they had in common was the process to get the species from microbial abundance data of the human gut, which might result in the omission of certain potential interactions due to the different standards of spelling species names. \n\nIn recent years, with the development of natural language processing (NLP), text mining strategy makes it possible to extract microbial interaction from unstructured texts. Furthermore, named entity recognition (NER) is the core task of interaction extraction (IE). The purpose of NER is to extract words with special meaning from the text, such as   Person  ,   Location  . Various methods about NER have been proposed as the advancement of computer technology, which are mainly based on following three categories:(1) rule-based method [ ]; (2) machine learning-based method [ ], 3) neural network-based method [ ]. It is not portable and universal that rule-based way needs to design rules in specific domain with experts. The second approach based on statistical machine learning has strong portability and excellent performance, but it requires complex feature engineering and large-scale labeling. Furthermore, neural network based method has the highlighting performance without cumbersome process of feature design as well as large-scale tagging data. Although the method of NER in the general domain has fully developed, it is a challenging task in the domain of bacterial name identification on account of complexity of microbial names. \n\nWang [ ,  ] proposed a method of bacterial named entity recognition based on conditional random fields (CRF) and dictionary, which contains more than 40 features (word features, prefixes, suffixes, POS, etc.). The model effect was optimized after selecting the best combinations of 35 features, in the meanwhile, the computing efficiency of this model was greatly improved by deploying the model on Spark platform. Unfortunately, CRF and dictionary-based method need manually design features and additionally dictionary resources, and the result of the model depend on the quality of the annotated data and the rationality of the feature design. \n\nIn the last few years, deep learning has been widely utilized and has achieved great performance in many fields, such as image [ ]; speech recognition [ ]; machine translation [ ]; reading comprehension [ ] and so on. Similarly, the method based on deep learning has attracted extensive attention in the field of NER. Lample [ ] first adopted Bi-LSTM -CRF for NER, Ma [ ] introduced Bi-LSTM-CNN- CRF for NER, in which CNN was used to extract character-level features. Since then, more and more deep learning algorithms are used for NER. Also, the biomedical text mining contest was organized to accelerate the research on biomedical [ ,  ], and many of top participating systems utilized deep learning in biomedical text [ ,  ]. Li [ ] shown that deep learning-based method could acquire well performance in bacterial NER. However, his work did not take advantage of the existing biological resources and incorporate them as features into the model. \n\nIn this paper, we propose a method combining domain features and deep learning for bacterial NER, which achieves excellent performance in dataset. When adopting POS features only, the F1-measure of the model reaches 89.4%. With POS features and dictionary features are both added, the F1-measure is up to 89.7%. The experimental results demonstrate that external resources can contribute to the improvement of the result of the model. \n\n\n## Materials and methods \n  \nAs shown in Fig. , we build a model mainly divided into the following three layers: embedding layer, encoding layer and decoding layer. Firstly, we concatenate pre-trained word embedding, character-level embedding extracted by convolution neural network, POS embedding and dictionary embedding and input it into the encoding layer. Then the encoding layer is used for parameter learning. In the end, we can predict the best output path of sentence through the decoding layer.\n   \nThe model proposed in this paper. The concatenated word-level embedding, char-level embedding, pos embedding and dict embedding are input into encoding layer for learning, then the output of encoding layer are input into decoding layer for predict \n  \n\n### Embedding layer \n  \n#### Word embedding \n  \nAccording to a recent study, word embedding has achieved outstanding results in the field of NLP. Compared with the traditional encoding method, the word embedding technique can fully exploit semantic information between words, for example \u201cking\u201d \u2013 \u201cman\u201d\u2009+\u2009\u201cwoman\u201d\u2009=\u2009\u201cqueen\u201d, as well as using a low-dimensional continuous vector to represent the vector of words. This not only solves the sparse problem of the vector, but also obtains semantic information of the word. Currently, there are some well-performed word embedding tools which are widely used, such as fastText [ ], glove [ ], Word2vec [ ]. At the same time, Moen [ ] pre-trained a word embedding PubMed2vec with word2vec in the field of biomedical text mining. In our work, in order to obtain higher quality of word vectors, we downloaded more than 400 thousand abstracts about bacteria from PubMed and then used them together with our corpus to train word vectors. We adopted the skip-gram model of word2vec provided in gensim [ ] to train our corpus. \n\n\n#### Char embedding \n  \nAs shown by previous studies, character-level features have been proved to be work well in many NLP tasks. Kim [ ] used CNN to obtain character representation and then utilized LSTM to train a language model. Santos and Chiu [ ] showed that CNN could extract word morphological features (prefix and suffix etc.) effectively and encoded them into neural network. Lample [ ] also demonstrated that LSTM could extract morphological features of words. But, experiment results show that CNN is better than LSTM in the task of NER. As a consequence, in this paper, we use the CNN to obtain the character-level features of words. Figure\u00a0  illustrates detailed process of our method. Given a word W=  , T is the length of sequence,   c   represents the character of the word, e(  c  ) is the character vector for each character. In order to acquire morphological features of words, we use N times of convolution kernels X to perform convolution operations. The size of convolution kernels is k. The calculation formula of\u00a0  O   output for each convolution can be written as:\n   \nThe method to get char-level embedding in our paper. The characters in a word are transfer to vectors, then though a convolution layer and a max-pooling, finally the output are concatenated to represent the word \n  \n\nWhere   W   denote the weight matrix and   b   denote the bias vector,   X  \u2009=\u2009[  e  (  c  ),\u2009\u2026,\u2009  e  (  c  ),\u2009\u2026,\u2009  e  (  c  )], relu denote the activation function. Finally, for each convolution kernel output\u00a0  O  , \u2026,   O  , \u2026,   O  , the max-pooling operation is performed to obtain the character vector representation of the word. The j-th vector representing   W   can be computed as:\n \n\n\n#### Domain features \n  \nInspired by the related work of Chiu [ ] and Huang [ ], some artificial designed features and domain knowledge can also promote the effectiveness of the neural network model. Consequently, in this paper, we discuss the influence of POS and dictionary features on the neural network model. \n\nIn fact, although the model of neural network can extract feature automatically to some extent, some linguistic features cannot be well learned on account of the complicacy of natural language processing. We use the nltk [ ] tool to get the POS features of each word, and bidirectional maximum matching algorithm (BDMM) [ ] to obtain dictionary features. UMLS [ ] is a unified medical database, which contains volume of standardized names and abbreviations for diseases, proteins, genes and microorganisms. Hence we extract all the bacterial names from UMLS and integrate them into a bacterial dictionary. Table\u00a0  gives an example of our preprocessing data.\n   \nThe example of the data format in our paper \n  \n\n\n#### Encoding layer \n  \nThe long short-term memory network is a [ ] variant of recurrent neural network (RNN). It solves the problems of the gradient disappearance and the gradient explosion in the training process of RNN [ ,  ]. In the practical application process, LSTM can handle the time series problem and the long-distance dependence problem well. It mainly consists of three gates: input gate, output gate and forget gate. The main formula is as follows:\n \n\nWhere   \u03c3   denote sigmoid function,   x   denote the input of LSTM,   h   denote the output of LSTM,   W  ,\u00a0  W  ,\u00a0  W  ,\u00a0  W   denote the weight matrix in the process of training ,   b  ,\u00a0  b  ,\u00a0  b  , b is the bias vector. \n\nFor many sequence labeling tasks, we should consider the context information of the word at the same time, but a single LSTM structure can only obtain the historical information of the word. For this reason, Dyer [ ] proposed a bidirectional long short-term memory (Bi-LSTM) network for acquiring the history information and future information of words. At first, given a sequence X=  , n represents the length of sequence,   x   is the input vector at time t, use a forward LSTM to obtain historical information   =LSTM ( ,   x  ). Then a backward LSTM to obtain future information  . Finally, the outputs from both directions are concatenated to represent the word information   learned at time t. \n\n\n#### Decoding layer \n  \nFor the task of sequence labeling, we should consider the dependency problem between words, because the neighboring words of the current word contribute to the labeling of the word, so we introduce the conditional random fields (CRF) [ ] on the top of encoding layer. CRF has been proved to have a good effect on sequence labeling. Given the input of a sentence:\n \n\nWhere   x   denote the vector representation of\u00a0the\u00a0output of encoding layer. We define P as the score matrix output by Bi- LSTM, the size of the matrix P is n \u00d7 m, n represents the length of the sentence, m is the number of types of output tags and   P   represents the probability of the j-th tag of the i-th word. The output of the definition sentence is:\n \n\nWhere   y   represents the output prediction for each word. The score we define for the sentence is:\n \n\nWhere T represents the tag transition matrix, for example,   T   represents the transition probability from tag i to tag j.   y   and   y   denote the start and end that we add to the matrix, so the size of T is m\u2009+\u20092. T is learned during training. Then, softmax function is used to normalize the output path y:\n \n\nWhere Y is the set of all possible output sequences of sentence X, and we maximize log-probability of the correct output sequence during the training, which can represented as follows:\n \n\nIn the decoding stage, we predict the best output path through maximizing the score function:\n \n\nThis process can be implemented by dynamic programming and inferred by Viterbi algorithm [ ]. \n\n\n#### Dataset \n  \nIn this paper, we utilize the dataset proposed by Wang [ ] . They used \u201cbacteria\u201d, \u201coral\u201d and \u201chuman\u201d as keywords to retrieve relevant abstracts from PubMed for nearly 10\u2009years. At last they selected 1030 abstracts as train set and 314 abstracts as test set. The statistics about dataset are shown in Table\u00a0 . In order to evaluate the performance of the model, we divided it into training set, validation set and test set, in which 20% of the original training set was taken as validation set. We downloaded all abstracts related to \u201cbacteria\u201d from PubMed in the past decade and then trained word vectors along with the dataset.\n   \nThe statistics of the dataset in our experiment \n  \n\n\n#### Tagging scheme \n  \nIn this experiment, our task is to give each word in the sentence a tag. As we investigated, a bacterial entity in a sentence may be composed of multiple words, so we need a set of identifiers to represent it. Currently, there are three main types of tagging scheme: IOB2, BIOE and BIOES. To compare the performance with other models, we use the IOB2 format as our tagging scheme. In the IOB2 tagging method, B-label represents the starting word of an entity, I-label represents the inside word of an entity, and O represents the word is not in entity. \n\n\n#### Training and hyper-parameter settings \n  \nIn this experiment, the following four parts constitute the input of our model: word embedding, character embedding, pos embedding, dict embedding. The word embedding is trained by word2vec with the dimension is 300, and the character embedding is trained by CNN. The initial input of the characters vector are 25-dimensional. The dimensions of the pos embedding and the dict embedding are 25, 5, respectively. The input embeddings all randomly initialized with uniform samples from   where   dim   is the dimension of embeddings [ ]. The convolutional layers and fully connect layers were initialized with glorot uniform initialization [ ], bias vectors are initialized with 0. Then the four embeddings are concatenated to input the model for parameter learning. During the training, we use the back propagation algorithm to update the parameters. Our optimization function is Adam [ ] algorithms with a learning rate of 0.001 and a decay rate of 0.9. \n\nWe introduce dropout [ ] and early stopping [ ] technology to the model during the process of training. The purpose of the dropout technique is to prevent over-fitting of the model by randomly dropping some hidden nodes during the training process. We introduce dropout technology both before and after the decoding layer, which set dropout rate\u2009=\u20090.5. The principle of early stopping technology is to stop training when the result of the validation set is no longer improved within a tolerance range class, and record the parameters of model which has best result. It can prevent over-fitting of the model and select the best iteration number effectively. In this experiment, we set patience\u2009=\u20095. The detailed parameters are shown in Table\u00a0 .\n   \nThe hyper-parameter in our experiment \n  \n\n\n\n### Evaluation metrics \n  \nIn order to evaluate the performance of the model proposed in this paper, we choose P (precision), R (recall) and F1 (F1-measure) as experiment metrics.\n \n\nWhere TP is the number of entities correctly identified and FP is the number of non-entities identified as entities. F1-measure is the harmonic average of P and R. \n\n\n\n## Results and discussion \n  \nThe experimental results are shown in Table\u00a0 . Model 1 and Model 2 were proposed by Wang [ ,  ], and their models were based on traditional machine learning methods. Therefore, they manually extracted 43 groups of features, and then achieved good results on the dataset through feature combination and selection. Besides, the model based on Spark was greatly improved in speed. The model we proposed previously was based on neural network and did not need to extract features manually [ ]. It was an end-to-end model and had enhanced the effect of the bacteria NER to some extent, but it did not make full use of the linguistic features and existing resources. In this paper, we consider the influence of domain features on the model. The experimental results show that the F1-measure of the model achieves 89.4% when adding the POS feature. With dictionary features and POS features are added, the model\u2019s F1-measure is up to 89.7%. From the above, we can include that these two features can effectively improve the effect of the model.\n   \nThe result of our model \n  \n\nIn order to evaluate the impact of word embedding on the model, we compare the performance of four pre-trained word embedding: glove [ ], fastText [ ], word2vec [ ] and PubMed2vec [ ] as well as random initialization in our model. Among them, glove and fastText are trained on Wikipedia which the dimension are 300, Pubmed2vec is 200 dimension which is trained on PubMed and PMC articles, and word2vec is based on the bacterial abstract training we downloaded from PubMed for 10 years. The experimental results are shown in Fig.\u00a0 . As can be seen from the figure, the use of the word embedding in the general domain has a certain effect on the model compared with the random initialization and the performance is better than the model based on machine learning. Also, we can know that the result of using the medical field word vector is better than the general domain word vector, although it is not reach the highest. However, the F1-measure is the best when using the word vector of the bacterial field. As a result, the experiment proves that word vectors in different fields should be used for different professional problems, so that the model effect can be optimal and the error rate will be reduced.\n   \nThe influence of different embedding in model \n  \n\nTo evaluate the practicability of our model, we utilize the model for named entity recognition on real data. We downloaded more than 400 thousand bacteria-related abstracts from PubMed for bacterial NER, and then compared the identified entity with the bacterial dictionary. UMLS [ ] has collected nearly 4.5 million bacterial entities, which is relatively a large database of bacterial entities. Therefore, we extracted all bacterial entities from UMLS to construct a bacterial dictionary. Figure\u00a0  is a comparison of experiments. Compared with 4.5 million bacterial entities in UMLS, more than 500 thousand bacterial entities are not in the dictionary when exact matching; however, when appending some rules, there still have more than 300 thousand entities not in the dictionary. Analyzing the entities predicted by our model shows that even though some predicted entities may be misidentified, our model can still largely predict mainly bacterial strains and bacteria in different ways of writing, and most of them are not updated or included in current dictionary.\n   \nThe performance of our model in real dataset \n  \n\n\n## Conclusion and outlook \n  \nThis paper proposes a method for bacterial named entity recognition based on deep learning and domain features, integrating convolutional neural network, long short-term memory network, and conditional random fields. The experimental results demonstrate that the use of POS features and dictionary features can well promote the recognition of bacterial named entities. At the same time, we also compare the effects of different word embedding on the experimental results. The results illustrate that domain-specific embedding is more effective for bacterial named entity recognition. \n\nRecently, language models have been widely used in the field of natural language, these models have achieved good results in many NLP tasks. In the future, we will combine the language model with bacterial named entity recognition, improve the effect of bacterial named entity recognition, and combine our task with interaction extraction. \n\n \n", "metadata": {"pmcid": 6886245, "text_md5": "582d67ca4a1fe843c901b88e9f3b8df3", "field_positions": {"authors": [0, 97], "journal": [98, 116], "publication_year": [118, 122], "title": [133, 225], "keywords": [239, 326], "abstract": [339, 1926], "body": [1935, 23692]}, "batch": 1, "pmid": 31787075, "doi": "10.1186/s12859-019-3071-3", "pmc_url": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6886245", "efetch_url": "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pmc&id=6886245"}, "display_title": "pmcid: <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6886245\">6886245</a>", "list_title": "PMC6886245  A hybrid deep learning framework for bacterial named entity recognition with domain features"}
